import random
import os
import sys
import argparse
from tqdm import tqdm
from collections import Counter


class AdvancedFileShuffler:
    def __init__(self):
        self.parser = argparse.ArgumentParser(
            description='–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫')
        self.setup_arguments()
        self.args = self.parser.parse_args()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.remove_duplicates = True  # –í—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ
        self.duplicates_removed = 0   # –°—á–µ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    def setup_arguments(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.parser.add_argument(
            '-i', '--input', default='input.txt', help='–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª')
        self.parser.add_argument(
            '-o', '--output', default='output.txt', help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª')
        self.parser.add_argument('-n', '--intensity', type=int, default=5,
                                 help='–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è (3-10)')
        self.parser.add_argument('-e', '--keep-empty', action='store_true',
                                 help='–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏')
        self.parser.add_argument('-c', '--crypto', action='store_true',
                                 help='–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ')
        self.parser.add_argument('--no-progress', action='store_true',
                                 help='–û—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞')

    def read_and_filter(self):
        """–ß—Ç–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.args.input, 'r', encoding='utf-8') as f:
                lines = [line.strip('\n') if self.args.keep_empty else line.strip()
                         for line in f]

                if not self.args.keep_empty:
                    lines = [line for line in lines if line]

                return lines
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            sys.exit(1)

    def remove_duplicate_lines(self, lines):
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞"""
        seen = set()
        unique_lines = []

        for line in lines:
            if line not in seen:
                seen.add(line)
                unique_lines.append(line)
            else:
                self.duplicates_removed += 1

        print(f"\nüîç –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.duplicates_removed}")
        print(f"üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(unique_lines)}")
        return unique_lines

    def enhanced_shuffle(self, lines):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è"""
        if self.args.crypto:
            random.seed(os.urandom(16))

        shuffled = lines.copy()

        for _ in tqdm(range(self.args.intensity),
                      desc="üåÄ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ",
                      disable=self.args.no_progress):

            random.shuffle(shuffled)

            for i in range(len(shuffled)-1, 0, -1):
                j = random.randint(0, i)
                shuffled[i], shuffled[j] = shuffled[j], shuffled[i]

        return shuffled

    def analyze_results(self, original, processed):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        same_pos = sum(1 for o, s in zip(original, processed) if o == s)
        changed = len(original) - same_pos

        print("\n" + "="*60)
        print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê".center(60))
        print("="*60)
        print(f"{'‚ñ™ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ:':<35} {len(original):>10,}")
        print(f"{'‚ñ™ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:':<35} {self.duplicates_removed:>10,}")
        print(f"{'‚ñ™ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫:':<35} {len(processed):>10,}")
        print(
            f"{'‚ñ™ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ –º–µ—Å—Ç–µ:':<35} {same_pos:>10} ({same_pos/len(original):.2%})")
        print(
            f"{'‚ñ™ –ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π:':<35} {changed:>10} ({changed/len(original):.2%})")
        print(
            f"{'‚ñ™ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è:':<35} {self.args.intensity:>10} —Ä–∞—É–Ω–¥–æ–≤")
        print("="*60)

    def save_results(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            with open(self.args.output, 'w', encoding='utf-8') as f:
                f.write('\n'.join(data))
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ '{self.args.output}'")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            sys.exit(1)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        print("\n" + "="*60)
        print("=== –£–õ–£–ß–®–ï–ù–ù–´–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢ –ü–ï–†–ï–ú–ï–®–ò–í–ê–ù–ò–Ø ===".center(60))
        print("="*60)

        # 1. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        print(f"\nüìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ '{self.args.input}'...")
        original_lines = self.read_and_filter()
        print(f"‚úî –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(original_lines):,}")

        # 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print("\nüîç –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        processed_lines = self.remove_duplicate_lines(original_lines)

        # 3. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
        print("\nüîÄ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è...")
        shuffled_lines = self.enhanced_shuffle(processed_lines)

        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        self.save_results(shuffled_lines)

        # 5. –ê–Ω–∞–ª–∏–∑
        self.analyze_results(original_lines, shuffled_lines)

        print("\n‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    shuffler = AdvancedFileShuffler()
    shuffler.run()
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
